--- /Users/zeleznick/Downloads/medbox_skill/node_modules/aws-lambda-mock-context/index.js   2016-10-13 23:52:32.000000000 -0700
+++ node_modules/aws-lambda-mock-context/index.js   2017-06-15 01:36:44.000000000 -0700
@@ -1,5 +1,5 @@
 'use strict';
-const uuid = require('node-uuid');
+const uuid = require('uuid');
 const moment = require('moment');
 const defer = require('pinkie-defer');
 const pkg = require('./package.json');
@@ -13,11 +13,26 @@
        account: '123456789012',
        functionName: pkg.name,
        functionVersion: '$LATEST',
-       memoryLimitInMB: '128'
+       memoryLimitInMB: '128',
+       timeout: 3
    }, options);

    const deferred = defer();

+   let start = Date.now();
+   let end;
+
+   function launchTimer() {
+       // console.log(`===S:${start} Timer started===`);
+       setTimeout(() => {
+           if (context.getRemainingTimeInMillis() === 0) {
+               let delta = ((end || Date.now()) - start)/1000;
+               console.log(`===S:${start}\tD:${delta}===`);
+               context.fail(new Error(`Task timed out after ${opts.timeout}.00 seconds`));
+           }
+       }, opts.timeout * 1000);
+   };
+
    const context = {
        callbackWaitsForEmptyEventLoop: true,
        functionName: opts.functionName,
@@ -28,11 +43,20 @@
        invokeid: id,
        logGroupName: `/aws/lambda/${opts.functionName}`,
        logStreamName: `${moment().format('YYYY/MM/DD')}/[${opts.functionVersion}]/${stream}`,
-       getRemainingTimeInMillis: () => Math.floor(Math.random() * (3000 - 100)) + 100,
+       getRemainingTimeInMillis: () => {
+           const endTime = end || Date.now();
+           const remainingTime = (opts.timeout * 1000) - (endTime - start);
+
+           return Math.max(0, remainingTime);
+       },
        succeed: result => {
+           end = Date.now();
+           // console.log("===SUCCESS===");
            deferred.resolve(result);
        },
        fail: err => {
+           end = Date.now();
+           // console.log("===FAIL===");
            if (typeof err === 'string') {
                err = new Error(err);
            }
@@ -47,7 +71,8 @@

            context.succeed(result);
        },
-       Promise: new Promise(deferred)
+       Promise: new Promise(deferred),
+       launchTimer: launchTimer
    };

    return context;